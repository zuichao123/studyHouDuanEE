异常
什么是异常？
Java中的错误分为两类：
一类是编译时错误，一般指语法错误，这种错误是显而易见的，IDE集成开发环境都会对这种错误进行提示，即我们在编写代码时可以看到的语法错误。

另外一类叫做运行时错误，这类错误指我们在编写代码的过程中以及程序编译期间都没有问题，可以正常编译通过，一旦运行就会报错，这类错误容易被忽略，比如数组下标越界，把0当作除数等。

Java作为一门面向对象的编程语言，可以将任何事物看成对象，同理，错误也可以被看做是对象，Java中有一组专门用来描述各种不同的运行错误的类。

异常就是Java提供的用于处理运行时错误的一种机制，具体步骤为当程序出现错误时，会自动生成一个异常类对象，该对象就封装了异常的所有信息并提交给系统，由系统转交给能处理该异常的代码进行处理。

异常类可以分为两类，Error和Exception，Error指系统错误，程序无法解决，JVM生成。
Exception指程序运行期间出现的错误，我们编写的程序可以对其进行处理。

异常的使用
try-catch，用try来监听可能会发生异常的代码，一旦发生异常，系统会自动生成一个异常对象，通过catch捕获该异常对象并进行处理。

基本语法：
try{
	//可能会抛出异常的代码
}catch(异常对象){
	//处理异常
}

除了try-catch，finally关键字也是经常使用的
无论程序是否抛出异常，finally代码块中的程序都会执行，finally一般跟在catch代码块之后，
基本语法：
try{
	//可能会抛出异常的代码
}catch(异常对象){
	//处理异常
}finally{
	//无论是否抛出异常都要执行的代码
}

因为finally这种特性（无论如何一定会执行），一般在finally中进行释放资源的操作。

1.Throwable：所有异常类的根结点
2.Error Exception
java.lang包中的类

3.Error：VirtualMachineError，AWTError，IOError

VirtualMachineError：StackOverflowError，OutOfMemoryError，用来描述内存溢出等系统问题，
VirtualMachineError，StackOverflowError，OutOfMemoryError存在于java.lang包中

AWTError存在于java.awt包中

IOError存在于java.io包中

Exception：IOException，RuntimeException，
IOException存在于java	.io包中
RuntimeException存在于java.lang包中

IOException：FileLockInterruptionException，FileNotFoundException，FilerException，这些异常通常都是处理通过IO流进行文件传输过程中发生的错误。
FileLockInterruptionException存在于java.nio.channels包中
FileNotFoundException存在于java.io包中
FilerException存在于javax.annotation.processing包中

RuntimeException：
ArithmeticException：表示数学运算异常
ClassNotFoundException：表示类未定义异常
IllegalArgumentException：表示参数格式错误异常
ArrayIndexOutofBoundsException：表示数组下标越界异常
NullPointException：表示空指针异常
NoSuchMethodException：表示方法未定义异常
NumerFormatException：表示将其他数据类型转为数值类型时的不匹配异常。
以上这些类全部存放在java.lang包中。

throw和throws

Java中抛出异常有3种方式：
1.try-catch
2.使用throw是开发者主动抛出异常，即读到throw关键字时代码就一定会抛出异常，
基本语法：trhow new Exception();
是一种基于代码逻辑的判断，并主动抛出异常的方式
3.使用throws关键字抛出异常，
try-catch 和 throw都是作用于具体的逻辑代码，throws则是作用于方法，用来描述该方法可能抛出的异常。

test()方法使用throws抛出一个第四级别的异常（NumberFormatException），
main()方法中调用test()方法时可以try-cath，也可以不添加try-catch
但是如果test()throws一个Exception，
main()方法中调用时必须try-catch


