LinkedList和Stack都有pop方法，都是取出集合的第一个元素，但是其顺序是恰好相反的，Stack采用的是“后进先出”的原则，是栈的形式，LinkedList采用的是“先进先出”的原则，是队列(Queue)的形式。LinkedList定义时实现了Deque接口，Deque是Queue的子接口，Queue继承自Collection，底层实现了队列的数据结构。

在实际开发中，不能直接实例化Queue的对象来完成操作，需要实例化其实现类，Queue的实现类是AbstractQueue，AbstractQueue是一个抽象类，开发时需要对其子类进行实例化PriorityQueue进行实例化。

PriorityQueue使用时需要注意，添加到该队列的数据必须是有序，即对象具备排序的功能，自定义的类需要实现Comparable。

Set接口
Set接口是Collection的子接口，Set接口采用的是散列的存储方式，所以集合中的元素没有顺序，Set可以存储一组无序，唯一（不可重复）的对象。
实际开发中不能直接实例化Set对象，需要对其实现类进行实例化操作完成业务代码，Set的常用的实现类有HashSet，LinkedHashSet，TreeSet。

HashSet是开发中经常使用到的Set的实现类，存储一组无序，唯一(不可重复)的对象，这里的无序是指元素的存储顺序和遍历顺序是不一致的。

LinkeHashSet是Set的另外一个子接口，可以存储一组有序，唯一的元素，这里的有序指元素的存储顺序和遍历顺序是一致的。

LinkedHashSet判断两个对象是否相等：
1.判断两个对象的hashCod（哈希值）是否相等。
hashCode？
简单来说就是根据一定的规则讲与对象相关的信息，比如内存地址，属性值等，压缩成一个数值，这个数值称为散列值，就是改对象的hashCode。
两个不同对象的hashCode可能相等，但是hashCode值不相等的两个对象一定不是同一个对象。

2.如果两个对象的hashCode不相等，那么这两个对象肯定不是一个对象，集合中可以全部保存。
如果两个对象的hashCode相等，再通过equals方法来判断，如果equals为true，表示是同一个对象，不能重复添加，如果equals为false，不是同一个对象，可以重复添加。

先判断hashCode的作用是尽量减少对equals方法的调用，提高效率。