文件上传
    客户端将本地的资源通过网络传输给服务端，然后保存到服务器端本地；

    HTTP网络协议 + IO流

    JSP
        1、input标签的type设置为file
        2、form表单的method设置为post，如果设置为get，那么传给服务器端的是文件名，是个字符串，而非文件本身。
        3、form表单的enctype设置为multipart/form-data，enctype默认是传输文本类型的数据，修改之后传输的是二进制数据。

    Servlet
        接收数据不能调用request.getParameter()获取，必须通过二进制来获取数据。



    使用工具完成上传
        1、导入commons-io、commons-fileupload
        2、通过工具类的相关方法完成上传

        工具的基本思想：
            commons-fileupload可以解析request，得到一个List<FileItem>，FileItem是工具自己封装的一个类，
            该类的每一个实例化对象对应JSP页面form表单中的一个input标签的值（除了提交，重置按钮之外）；
            拿到List<FileItem>之后，遍历集合，取出集合中的每一个FileItem对象，再调用对象的相关方法完成上传。


    使用commons-fileupload.jar工具上传例子：
        /**
         * 字节流上传
         * @param req
         * @param resp
         */
        private void uploadFilesForUtilsByteStream(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            InputStream inputStream = null;
            OutputStream outputStream = null;

            // 1、创建DiskFileItemFactory
            DiskFileItemFactory factory = new DiskFileItemFactory();
            // 2、创建文件解析器
            ServletFileUpload upload = new ServletFileUpload(factory);
            // 2.5、设置文件大小限制（1bytes*1024=1KB * 1024=1MB * 1024=1GB * 1024=1TB）
            int size = 5;
            upload.setSizeMax(1024 * 1024 * size);
            upload.setHeaderEncoding("UTF-8"); // 中文文件名乱码
            // 3、获取List<FileItem>
            try {
                List<FileItem> list = upload.parseRequest(req);
                // 4、判断FileItem的类型，是否为表单域（文本输入）
                for (FileItem fileItem : list) {
                    // 如果是表单域，表示该值是一段文本，打印输出
                    if (fileItem.isFormField()) {
                        String name = fileItem.getFieldName();// 标签名
                        //处理中文乱码
                        String value = fileItem.getString("UTF-8");
                        System.out.println(name+":"+value);
                    } else {
                        String path = req.getServletContext().getRealPath("files");
                        inputStream = fileItem.getInputStream(); // 获取请求输入流
                        outputStream = new FileOutputStream(path + "/" + fileItem.getName());
                        int temp = 0;
                        while ((temp = inputStream.read()) != -1) {
                            outputStream.write(temp);
                        }
                    }
                }
            } catch (FileUploadException e) {
                String message = "文件大小不能超过"+size+"M，请重新选择上传！";
                req.getSession().setAttribute("message", message);

                resp.sendRedirect( "upload.jsp");
                System.out.println(message);
            } finally {
                outputStream.close();
                inputStream.close();
            }
        }



文件下载
    原理
        当客户端的一个下载请求发送到服务端之后，首先服务器端中的java程序通过输入流读取在服务端本次存储的目标文件，
        再通过输出流将文件的二进制数据流写入到响应（response）中，通过response传给了客户端，客户端进行下载即可，
        使用客户端浏览器自带的下载工具来完成下载。


    例子：
        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            // 设置为下载模式
            resp.setContentType("application/x-msdownload");

            // 获取文件的存放路径
            String path = req.getServletContext().getRealPath("files");
            // 获取文件名 --------
            String fileName = req.getParameter("fileName");
            // 设置文件名，并处理中文
            resp.setHeader("Content-Disposition", "attachment;fileName=" + URLEncoder.encode(fileName, "UTF-8"));

            // 判断文件是否存在
            File file = new File(path + "/" + fileName);
            if(!file.exists()){
                String message = "文件不存在！";
                System.out.println(message);
                HttpSession session = req.getSession();
                session.setAttribute("message", message);
                resp.sendRedirect("download.jsp");
                return;
            }

            // 字节输入流
            InputStream inputStream = new FileInputStream(file);
            // 获取响应输出流
            OutputStream outputStream = resp.getOutputStream();
            int temp = 0;
            while ((temp = inputStream.read()) != -1){
                outputStream.write(temp);
            }
            // 关流
            outputStream.close();
            inputStream.close();

            System.out.println("下载successful");
        }
