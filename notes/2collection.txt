collection
      Hashtable: jdk1.0
           安全性较高，性能较差，无序
      HashMap：（常用，直接往里装，存取性能最高）
           线程不安全，性能较高，无序

      Vector：线程安全，安全性高，性能较差

      ArrayList：线程不安全，安全性较差，性能较高

      TreeMap：（ 常用，存的时候要排序，所有存取性能比hashMap低）
           按key排序--如果key值是一个自定义数类型，择该类必须实现comparable，并且实现compareTo方法，在该方法中定义当前类对象的排序规则

      WeakHashMap：
           垃圾回收


      总结：
           HashMap：存储一组无序，并且key值不可以重复的数据
           HashTable：存储一组无序，并且key值不可重复的数据，Hashtable的使用与HashMap基本一致
                      ，区别在于Hashtable是线程安全的，性能较低，HashMap是非线程安全的，性能较高。
           TreeMap：存储一组有序，并且key值不可重复的数据，这里的有序是指集合会自动根据key值对元素
                    进行排序，默认是按照升序的方式排列，准确的说是对key值进行升序排序。

    Map例子：
         // 实例化Map对象
         HashMap<String, String> hashMap = new HashMap<>();

         // 添加元素
         hashMap.put("k1", "java");
         hashMap.put("k2", "java2");
         hashMap.put("k3", "java3");
         System.out.println(hashMap);

         // 取出元素,只能通过key值取出value值
         Set keys = hashMap.keySet();
         Iterator it = keys.iterator();
         while (it.hasNext()){
             System.out.println(hashMap.get(it.next()));
         }

         // 取出所有的values值
         Collection collection = hashMap.values();
         Iterator iterator = collection.iterator();
         while (iterator.hasNext()){
             System.out.println(iterator.next());
         }

         // 判断指定的key或者value是否存在
         boolean flag = hashMap.containsKey("k1");
         if(flag)
             System.out.println("存在k1");

         boolean flag2 = hashMap.containsValue("java");
         if (flag2)
             System.out.println("存在java");

         // hashtable
         Hashtable<String, String> hashtable = new Hashtable<>();
         hashMap.put("k1", "hello");
         hashMap.put("k2", "hello2");
         hashMap.put("k3", "hello3");
         System.out.println(hashtable.get("k3"));
         hashtable.keySet();
         hashtable.values();

         // TreeMap
         TreeMap<String, String> map = new TreeMap<>();
         map.put("g", "hellow");
         map.put("b", "bbb");
         map.put("e", "eeelow");
         map.put("d", "dddlow");
         map.put("f", "ddddfff");
         Set keys2 = map.keySet();
         Iterator it2 = keys2.iterator();
         while (it2.hasNext()){
             String str = (String) it2.next();
             System.out.println(str+":"+map.get(str));
         }
         TreeMap<User, String> map1=new TreeMap<User, String>();
         map1.put(new User("张三", 1), "张三");
         map1.put(new User("张三", 2), "张三2");
         map1.put(new User("张三", 3), "张三3");
         Set keys3 = map1.keySet();
         Iterator iterator1 = keys3.iterator();
         while (iterator1.hasNext()){
             User user = (User) iterator1.next();
             System.out.println(user+"\t\t"+map1.get(user) );
         }

         // WeakHashMapTest
         WeakHashMap<String, String> map2 = new WeakHashMap<>();
         map2.put("a","java");
         map2.put("b","java2");
         map2.put("c","java3");
         map2.put("d","java4");
         System.out.println(map2.get("c"));
         System.gc();
         map2.put("h","java6");
         System.out.println(map2);


    Set例子：
        /**
             * 有序（存储时的顺序）
             * 不可重复
             */
            private static void linkedHashSetTest() {
                LinkedHashSet set = new LinkedHashSet();
                set.add(new Dog("旺财", "黑背"));
                Dog newDog = new Dog("小黑", "牧羊犬");
                set.add(newDog);
                set.add(new Dog("大黑", "笨狗"));
                set.add(new Dog("黑大", "笨狗2"));
                System.out.println("\n共计："+set.size()+"条狗");
                Iterator it =  set.iterator();
                while (it.hasNext()){
                    Dog dog = (Dog) it.next();
                    System.out.print(dog.getName()+"="+dog.getBrand()+"\t\t");
                }
            }

            /**
             * 无序
             * 不可重复
             */
            private static void hashSetTest() {
                HashSet set = new HashSet();
                set.add(new Dog("旺财", "黑背"));
                Dog newDog = new Dog("小黑", "牧羊犬");
                set.add(newDog);
                set.add(new Dog("大黑", "笨狗"));
                set.add(new Dog("黑大", "笨狗2"));
                System.out.println("共计："+set.size()+"条狗");
                Iterator it =  set.iterator();
                while (it.hasNext()){
                    Dog dog = (Dog) it.next();
                    System.out.print(dog.getName()+"="+dog.getBrand()+"\t\t");
                }

            }


    List例子：
            /**
             * 旨在元素的增加、删除
             */
            private static void linkedListTest() {
                LinkedList list = new LinkedList();
                Dog dog4 = new Dog("小黑4", "牧羊犬4");
                list.add(new Dog("小黑", "牧羊犬"));
                list.add(new Dog("小黑2", "牧羊犬2"));
                list.add(new Dog("小黑3", "牧羊犬3"));
                list.add(dog4);

                System.out.println("集合头部Dog:");
                Dog firstDog = (Dog) list.getFirst();
                System.out.println(firstDog.getName()+","+firstDog.getBrand()+"\t\t");

                System.out.println("集合的尾部dog：");
                Dog endDog = (Dog) list.getLast();
                System.out.println(endDog.getName()+","+endDog.getBrand()+"\t\t");

                System.out.println("向集合的头部添加Dog：");
                list.addFirst(new Dog("小新", "斑点狗"));
                for(int i=0;i<list.size(); i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+","+dog.getBrand()+"\t\t");
                }

                System.out.println("\n向集合的尾部添加Dog：");
                list.addLast(new Dog("新小", "黑狗"));
                for(int i=0;i<list.size();i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+"-"+dog.getBrand()+"\t\t");
                }

                System.out.println("\n移除集合头部的Dog：");
                list.removeFirst();
                for(int i=0;i<list.size();i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+"-"+dog.getBrand()+"\t\t");
                }

                System.out.println("\n移除集合尾部的Dog：");
                list.removeLast();
                for(int i=0;i<list.size();i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+"-"+dog.getBrand()+"\t\t");
                }
            }

            /**
             * 旨在元素的查找
             */
            private static void arrayListTest() {
                //        System.out.println("请输入4个狗：");
                ArrayList list = new ArrayList();
        //        Scanner scanner = new Scanner(System.in);
        //        for(int i=0; i<4; i++){
        //            System.out.println("请输入Dog的名字：");
        //            String name = scanner.next();
        //            System.out.println("请输入Dog的品种");
        //            String brand = scanner.next();
        //
        //            Dog dog = new Dog(name, brand);
        //            list.add(dog);
        //        }
                Dog dog4 = new Dog("小黑4", "牧羊犬4");
                list.add(new Dog("小黑", "牧羊犬"));
                list.add(new Dog("小黑2", "牧羊犬2"));
                list.add(new Dog("小黑3", "牧羊犬3"));
                list.add(dog4);

                System.out.println("共计："+list.size()+"条狗");

                for(int i=0;i<list.size(); i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+dog.getBrand()+"\t\t");
                }

                System.out.println("\n-------操作-------");
                System.out.print("删除第一个后");
                list.remove(1);
                System.out.println(" 还有："+list.size()+"条狗");
                for(int i=0;i<list.size(); i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+dog.getBrand()+"\t\t");
                }

                list.remove(dog4);
                System.out.print("\n删除小黑4后");
                System.out.println(" 还有："+list.size()+"条狗");
                for(int i=0;i<list.size(); i++){
                    Dog dog = (Dog) list.get(i);
                    System.out.print(dog.getName()+dog.getBrand()+"\t\t");
                }

                System.out.println("\n判断大黄是否存在");
                boolean flag = list.contains(new Dog("大黄", "藏獒"));
                if(flag){
                    System.out.println("大黄在");
                }else {
                    System.out.println("大黄不在@");
                }
            }


    collections例子：
            ArrayList list = new ArrayList();

            // addAll 向集合中添加元素，个数没有限制
    //        Collections.addAll(list,"jack", 31, "shen",32,true,'s');
            Collections.addAll(list,"jack", 31, "shen",32);
            System.out.println(list);

            // reverse 将集合中的元素进行反转
            Collections.reverse(list);
            System.out.println("反转之后"+list);

            // binarySearch 检索元素在集合中的位置，若结果大于等于0则表示在集合中；
            //              若结果小于0则表示集合中不存在
            //              集合中的类型要一致，并且按照升序进行排序
            int index = Collections.binarySearch(list, "shen");
            System.out.println(index);

            // replaceAll 替换集合中的内容
            Collections.replaceAll(list, "jack", "collections");
            System.out.println(list);

            // sort 对集合进行排序
            ArrayList list2 = new ArrayList();
            Collections.addAll(list2,1,3,5,6,2);
            System.out.println(list2);
            Collections.sort(list2);
            System.out.println(list2);

            // 自定义排序规则
            MyCom mc = new MyCom();
            Collections.sort(list2,mc);
            System.out.println(list2);

            // swap 交换指定位置的元素
            Collections.swap(list2, 1, 2); // 第一个位置的和第二个位置的交换
            System.out.println(list2);